spring:
  config:
    import: optional:file:.env[.properties]
  application:
    name: cherrypick-backend
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 50MB

  datasource:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: ${DATASOURCE_DRIVER_CLASS_NAME}

  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    hibernate:
      ddl-auto: update

  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379
      lettuce:
        pool:
          max-active: 10
          max-idle: 5
          min-idle: 1

  security:
    oauth2:

      client:
        registration:
          kakao:
            client-name: kakao
            client-id: ${KAKAO_CLIENT_ID}
            redirect-uri: ${KAKAO_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope: profile_nickname
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  userInfoUrl: /api/user # 관심사 분리를 위해 유저 회원정보 수정 URL 분리, OAuth2SuccessHandler에서 신규 유저를 리다이렉트하는데 쓰임.

  jwt:
    access:
      key: ohvenatorbeatussantustuamfadipardiatcortuusnevictusfiatmorte
      period: 360000000
    refresh:
      key: telllmegoodhunterofthechurchhaveyouseenthelightaremychurchhunterswerehonorablespartansihopetobe
      period: 604800000

slack:
  webhook:
    url: ${SLACK_WEBHOOK_URL}

openai:
  api-key: ${OPENAI_API_KEY}
  api-url: ${OPENAI_API_URL}

aws:
  s3:
    region: ap-northeast-2
    access-key: ${S3_ACCESS_KEY}
    secret-key: ${S3_SECRET_KEY}
    bucket: ${BUCKET_NAME}

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql: trace
    org.hibernate.orm.jdbc.bind: trace  # Hibernate 6.x 이상에서 파라미터 값 출력에 필요